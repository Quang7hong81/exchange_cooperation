class SwapApi:
    """
    API definition for Perpetual Contract Trading
    """

    async def fetch_markets(self, params=None):
        """
        Fetch market information includes precision and limitations of amount, price, and cost

        :param params:  dict for non-specific parameters
        :return:        ccxt's market structure  https://github.com/ccxt/ccxt/wiki/Manual#market-structure

        example: [
            {
                'id':     ' btcusd',  // string literal for referencing within an exchange
                'symbol':  'BTC/USD', // uppercase string literal of a pair of currencies
                'base':    'BTC',     // uppercase string, unified base currency code, 3 or more letters
                'quote':   'USD',     // uppercase string, unified quote currency code, 3 or more letters
                'baseId':  'btc',     // any string, exchange-specific base currency id
                'quoteId': 'usd',     // any string, exchange-specific quote currency id
                'active':   true,     // boolean, market status
                'taker':    0.002,    // Optional, taker fee rate, 0.002 = 0.2%
                'maker':    0.0016,   // Optional, maker fee rate, 0.0016 = 0.16%
                'percentage': true,   // Optional, whether the taker and maker fee rate is a multiplier or a fixed flat amount
                'tierBased': false,   // Optional, whether the fee depends on your trading tier (your trading volume)
                'precision': {        // number of decimal digits "after the dot"
                    'price': 8,       // Optional, integer or float for TICK_SIZE roundingMode, might be missing if not supplied by the exchange
                    'amount': 8,      // Optional, integer, might be missing if not supplied by the exchange
                    'cost': 8,        // Optional, integer, very few exchanges actually have it
                },
                'limits': {           // value limits when placing orders on this market
                    'amount': {       // Optional
                        'min': 0.01,  // order amount should be > min
                        'max': 1000,  // order amount should be < max
                        'stepSize': 0.01 // Optional, order amount step size
                    },
                    'price': { ... }, // Optional, same min/max limits for the price of the order
                    'cost':  { ... }, // Optional, same limits for order cost = price * amount
                },
                'info':      { ... }, // the original unparsed market info from the exchange
            },

            ...                         # other pairs
        ]
        """
        raise NotImplementedError()

    async def fetch_order_book(self, symbol, params=None):
        """
        Fetch current order book

        :param symbol:  symbol in ccxt standard format, example: 'BTC/USDT'
        :param params:  dict for non-specific parameters
        :return:        ccxt's order book structure https://github.com/ccxt/ccxt/wiki/Manual#order-book-structure

        example:
        {
            'bids': [
                [ price, amount ], // [ Decimal, Decimal ]
                [ price, amount ],
                ...
            ],
            'asks': [
                [ price, amount ],
                [ price, amount ],
                ...
            ],
            'timestamp': 1499280391811,             // Optional, Unix Timestamp in milliseconds (seconds * 1000)
            'datetime': '2017-07-05T18:47:14.692Z', // Optional, ISO8601 datetime string with milliseconds
            'nonce': 1499280391811,                 // Optional, an increasing unique identifier of the orderbook snapshot
        }
        """
        raise NotImplementedError()

    async def create_order(self, symbol, type, side, amount=None, price=None, clientOrderId=None, positionSide=None,
                           reduceOnly=False, params=None):
        """
        Place a new order

        :param symbol:          symbol in ccxt standard format, example: 'BTC/USDT'
        :param type:            'limit' or 'market', other types aren't unified yet
        :param side:            'sell' or 'buy'
        :param amount:          amount of the order
        :param price:           price of the order, or None for market order
        :param clientOrderId: unique id generated by client side, will be used to check order when the create_order
                                API didn't give back result clearly (eg. timeout when request)
        :param positionSide:   "long" or "short" for Hedge Mode, null or "both" for One-way mode
        :param reduceOnly:     mark order as close position in dual side mode, or limit order not to open opposite side in
                                single side mode.
        :param params:          dict for non-specific parameters
        :return:                ccxt order structure https://github.com/ccxt/ccxt/wiki/Manual#order-structure

        example:
            {
                'id':                '12345-67890:09876/54321', // string
                'clientOrderId':     'abcdef-ghijklmnop-qrstuvwxyz', // a user-defined clientOrderId, if any
                'datetime':          '2017-08-17 12:42:48.000', // ISO8601 datetime of 'timestamp' with milliseconds
                'timestamp':          1502962946216, // order placing/opening Unix timestamp in milliseconds
                'lastTradeTimestamp': 1502962956216, // Unix timestamp of the most recent trade on this order
                'status':     'open',         // 'open', 'closed', 'canceled'
                'symbol':     'ETH/BTC',      // symbol
                'type':       'limit',        // 'market', 'limit'
                'side':       'buy',          // 'buy', 'sell'
                'price':       0.06917684,    // Decimal price in quote currency (may be empty for market orders)
                'average':     0.06917684,    // Decimal average filling price
                'amount':      1.5,           // ordered amount of base currency
                'filled':      1.1,           // filled amount of base currency
                'remaining':   0.4,           // remaining amount to fill
                'cost':        0.076094524,   // 'average' * 'price' (filling price used where available)
                'positionSide':'long',        // side of the position, 'long' or 'short' for dual side mode, 'both' for single side mode
                'realizedPnl': 0.076094524,   // realized profit

                'trades':    [ ... ],         // a list of order trades/executions
                'fee': {                      // fee info, if available
                    'currency': 'BTC',        // which currency the fee is (usually quote)
                    'cost': 0.0009,           // the fee amount in that currency
                    'rate': 0.002,            // the fee rate (if available)
                },
                'info': { ... },              // the original unparsed order structure as is
        }
        """
        raise NotImplementedError()

    async def fetch_order(self, id, symbol, clientOrderId=None, params=None):
        """
        Fetch one single order with order id or client order id

        :param id:              order id
        :param clientOrderId: unique id generated by client side, will be used to check order when the create_order
                                API didn't give back result clearly (eg. timeout when request)
        :param symbol:          symbol in ccxt standard format, example: 'BTC/USDT'
        :param params:          dict for non-specific parameters
        :return:                ccxt order structure https://github.com/ccxt/ccxt/wiki/Manual#order-structure

        example:
        {
            'id':                '12345-67890:09876/54321', // string
            'clientOrderId':     'abcdef-ghijklmnop-qrstuvwxyz', // a user-defined clientOrderId, if any
            'datetime':          '2017-08-17 12:42:48.000', // ISO8601 datetime of 'timestamp' with milliseconds
            'timestamp':          1502962946216, // order placing/opening Unix timestamp in milliseconds
            'lastTradeTimestamp': 1502962956216, // Unix timestamp of the most recent trade on this order
            'status':     'open',         // 'open', 'closed', 'canceled'
            'symbol':     'ETH/BTC',      // symbol
            'type':       'limit',        // 'market', 'limit'
            'side':       'buy',          // 'buy', 'sell'
            'price':       0.06917684,    // Decimal price in quote currency (may be empty for market orders)
            'average':     0.06917684,    // Decimal average filling price
            'amount':      1.5,           // ordered amount of base currency
            'filled':      1.1,           // filled amount of base currency
            'remaining':   0.4,           // remaining amount to fill
            'cost':        0.076094524,   // 'average' * 'price' (filling price used where available)
            'positionSide':'long',        // side of the position, 'long' or 'short' for dual side mode, 'both' for single side mode
            'realizedPnl': 0.076094524,   // realized profit

            'trades':    [ ... ],         // a list of order trades/executions
            'fee': {                      // fee info, if available
                'currency': 'BTC',        // which currency the fee is (usually quote)
                'cost': 0.0009,           // the fee amount in that currency
                'rate': 0.002,            // the fee rate (if available)
            },
            'info': { ... },              // the original unparsed order structure as is
        }
        """
        raise NotImplementedError()

    async def cancel_order(self, id, symbol, clientOrderId=None, params=None):
        """
        Cancel one single order by id or client order id

        :param id:              order id
        :param clientOrderId: unique id generated by client side, will be used to check order when the create_order
                                API doesn't give back result clearly (eg. timeout when request)
        :param symbol:          symbol in ccxt standard format, example: 'BTC/USDT'
        :param params:          dict for non-specific parameters
        :return:                info

        example:
        {
            'info':  { ... }  // the original response
        }
        """
        raise NotImplementedError()

    async def fetch_orders(self, symbol, since=None, limit=None, fromId=None, direct='next', params=None):
        """
        Fetch all orders

        :param symbol:  symbol in ccxt standard format, example: 'BTC/USDT'
        :param since:   start time of the orders, should be a Unix timestamp in milliseconds
        :param limit:   limit number of orders in response
        :param fromId: start id of the orders
        :param direct:  "prev" or "next"
        :param params:  dict for non-specific parameters
        :return:        a list of ccxt order structures https://github.com/ccxt/ccxt/wiki/Manual#order-structure

        example:
        [
            {
                'id':                '12345-67890:09876/54321', // string
                'clientOrderId':     'abcdef-ghijklmnop-qrstuvwxyz', // a user-defined clientOrderId, if any
                'datetime':          '2017-08-17 12:42:48.000', // ISO8601 datetime of 'timestamp' with milliseconds
                'timestamp':          1502962946216, // order placing/opening Unix timestamp in milliseconds
                'lastTradeTimestamp': 1502962956216, // Unix timestamp of the most recent trade on this order
                'status':     'open',         // 'open', 'closed', 'canceled'
                'symbol':     'ETH/BTC',      // symbol
                'type':       'limit',        // 'market', 'limit'
                'side':       'buy',          // 'buy', 'sell'
                'price':       0.06917684,    // Decimal price in quote currency (may be empty for market orders)
                'average':     0.06917684,    // Decimal average filling price
                'amount':      1.5,           // ordered amount of base currency
                'filled':      1.1,           // filled amount of base currency
                'remaining':   0.4,           // remaining amount to fill
                'cost':        0.076094524,   // 'average' * 'price' (filling price used where available)
                'positionSide':'long',        // side of the position, 'long' or 'short' for dual side mode, 'both' for single side mode
                'realizedPnl': 0.076094524,   // realized profit

                'trades':    [ ... ],         // a list of order trades/executions
                'fee': {                      // fee info, if available
                    'currency': 'BTC',        // which currency the fee is (usually quote)
                    'cost': 0.0009,           // the fee amount in that currency
                    'rate': 0.002,            // the fee rate (if available)
                },
                'info': { ... },              // the original unparsed order structure as is
            },

            ...

        ]
        """
        raise NotImplementedError()

    async def fetch_open_orders(self, symbol=None, since=None, limit=None, fromId=None, direct='next', params=None):
        """
        Fetch all orders in open status

        :param symbol:  symbol in ccxt standard format, example: 'BTC/USDT'
        :param since:   start time of the orders, should be a Unix timestamp in milliseconds
        :param limit:   limit number of orders in response
        :param fromId: start id of the orders
        :param direct:  "prev" or "next"
        :param params:  dict for non-specific parameters
        :return:        a list of ccxt order structures https://github.com/ccxt/ccxt/wiki/Manual#order-structure

        example:
        [
            {
                'id':                '12345-67890:09876/54321', // string
                'clientOrderId':     'abcdef-ghijklmnop-qrstuvwxyz', // a user-defined clientOrderId, if any
                'datetime':          '2017-08-17 12:42:48.000', // ISO8601 datetime of 'timestamp' with milliseconds
                'timestamp':          1502962946216, // order placing/opening Unix timestamp in milliseconds
                'lastTradeTimestamp': 1502962956216, // Unix timestamp of the most recent trade on this order
                'status':     'open',         // 'open', 'closed', 'canceled'
                'symbol':     'ETH/BTC',      // symbol
                'type':       'limit',        // 'market', 'limit'
                'side':       'buy',          // 'buy', 'sell'
                'price':       0.06917684,    // Decimal price in quote currency (may be empty for market orders)
                'average':     0.06917684,    // Decimal average filling price
                'amount':      1.5,           // ordered amount of base currency
                'filled':      1.1,           // filled amount of base currency
                'remaining':   0.4,           // remaining amount to fill
                'cost':        0.076094524,   // 'average' * 'price' (filling price used where available)
                'positionSide':'long',        // side of the position, 'long' or 'short' for dual side mode, 'both' for single side mode
                'realizedPnl': 0.076094524,   // realized profit

                'trades':    [ ... ],         // a list of order trades/executions
                'fee': {                      // fee info, if available
                    'currency': 'BTC',        // which currency the fee is (usually quote)
                    'cost': 0.0009,           // the fee amount in that currency
                    'rate': 0.002,            // the fee rate (if available)
                },
                'info': { ... },              // the original unparsed order structure as is
            },

            ...

        ]
        """
        raise NotImplementedError()

    async def fetch_closed_orders(self, symbol, since=None, limit=None, fromId=None, direct='next', params=None):
        """
        Fetch all orders in closed and canceled status

        :param symbol:  symbol in ccxt standard format, example: 'BTC/USDT'
        :param since:   start time of the orders, should be a Unix timestamp in milliseconds
        :param limit:   limit number of orders in response
        :param fromId: start id of the orders
        :param direct:  "prev" or "next"
        :param params:  dict for non-specific parameters
        :return:        a list of ccxt order structures https://github.com/ccxt/ccxt/wiki/Manual#order-structure

        example:
        [
            {
                'id':                '12345-67890:09876/54321', // string
                'clientOrderId':     'abcdef-ghijklmnop-qrstuvwxyz', // a user-defined clientOrderId, if any
                'datetime':          '2017-08-17 12:42:48.000', // ISO8601 datetime of 'timestamp' with milliseconds
                'timestamp':          1502962946216, // order placing/opening Unix timestamp in milliseconds
                'lastTradeTimestamp': 1502962956216, // Unix timestamp of the most recent trade on this order
                'status':     'open',         // 'open', 'closed', 'canceled'
                'symbol':     'ETH/BTC',      // symbol
                'type':       'limit',        // 'market', 'limit'
                'side':       'buy',          // 'buy', 'sell'
                'price':       0.06917684,    // Decimal price in quote currency (may be empty for market orders)
                'average':     0.06917684,    // Decimal average filling price
                'amount':      1.5,           // ordered amount of base currency
                'filled':      1.1,           // filled amount of base currency
                'remaining':   0.4,           // remaining amount to fill
                'cost':        0.076094524,   // 'average' * 'price' (filling price used where available)
                'positionSide':'long',        // side of the position, 'long' or 'short' for dual side mode, 'both' for single side mode
                'realizedPnl': 0.076094524,   // realized profit

                'trades':    [ ... ],         // a list of order trades/executions
                'fee': {                      // fee info, if available
                    'currency': 'BTC',        // which currency the fee is (usually quote)
                    'cost': 0.0009,           // the fee amount in that currency
                    'rate': 0.002,            // the fee rate (if available)
                },
                'info': { ... },              // the original unparsed order structure as is
            },

            ...

        ]
        """
        raise NotImplementedError()

    async def fetch_my_trades(self, symbol, since=None, limit=None, fromId=None, direct='next', params=None):
        """
        Fetch recent deals

        :param symbol:  symbol in ccxt standard format, example: 'BTC/USDT'
        :param since:   start time of the trades, should be a Unix timestamp in milliseconds
        :param limit:   limit number of trades in response
        :param fromId: start id of the trades
        :param direct:  "prev" or "next"
        :param params:  dict for non-specific parameters
        :return:        a list of ccxt trade structures https://github.com/ccxt/ccxt/wiki/Manual#trade-structure

        example:
        [
            {
                'info':         { ... },                    // the original decoded JSON as is
                'id':           '12345-67890:09876/54321',  // string trade id
                'timestamp':    1502962946216,              // Unix timestamp in milliseconds
                'datetime':     '2017-08-17 12:42:48.000',  // ISO8601 datetime with milliseconds
                'symbol':       'ETH/BTC',                  // symbol
                'order':        '12345-67890:09876/54321',  // string order id or undefined/None/null
                'type':         'limit',                    // order type, 'market', 'limit' or undefined/None/null
                'side':         'buy',                      // direction of the trade, 'buy' or 'sell'
                'takerOrMaker': 'taker',                    // string, 'taker' or 'maker'
                'price':        0.06917684,                 // Decimal price in quote currency
                'amount':       1.5,                        // amount of base currency
                'cost':         0.10376526,                 // total cost (including fees), `price * amount`
                'positionSide': 'long',                     // side of the position, 'long' or 'short' for dual side mode, 'both' for single side mode
                'realizedPnl':  0.076094524,                // realized profit
                'fee':          {                           // provided by exchange or calculated by ccxt
                    'cost':  0.0015,                        // Decimal
                    'currency': 'ETH',                      // usually base currency for buys, quote currency for sells
                    'rate': 0.002,                          // the fee rate (if available)
                },
            }
        ]
        """
        raise NotImplementedError()

    async def fetch_balance(self, params=None):
        """
        Fetch balances in Perpetual Future Account

        :param params:  dict for non-specific parameters
        :return:        ccxt balance structure https://github.com/ccxt/ccxt/wiki/Manual#balance-structure

        example:
        {
            'info':  { ... },    // the original untouched non-parsed reply with details

            //-------------------------------------------------------------------------
            // indexed by availability of funds first, then by currency

            'free':  {           // money, available for trading, by currency
                'BTC': 321.00,   // Decimals...
                'USD': 123.00,
                ...
            },

            'used':  { ... },    // money on hold, locked, frozen, or pending, by currency

            'total': { ... },    // total (free + used), by currency

            //-------------------------------------------------------------------------
            // indexed by currency first, then by availability of funds

            'BTC':   {           // string, three-letter currency code, uppercase
                'free': 321.00   // Decimal, money available for trading
                'used': 234.00,  // Decimal, money on hold, locked, frozen or pending
                'total': 555.00, // Decimal, total balance (free + used)
            },

            'USD':   {           // ...
                'free': 123.00   // ...
                'used': 456.00,
                'total': 579.00,
            },

            ...
        }
        """
        raise NotImplementedError()

    async def fetch_trading_fee_rates(self, symbol=None, params=None):
        """
        Fetch trading fee rates of the user. This is useful if the fee rates are tier-based

        :param symbol:  symbol in ccxt standard format, example: 'BTC/USDT'
        :param params:  dict for non-specific parameters
        :return:        a list of fee rate structure

        example:
        [
            {
                'symbol':   'ETH/BTC',  // symbol
                'taker':    0.002,      // taker fee rate, 0.002 = 0.2%
                'maker':    0.0016,     // maker fee rate, 0.0016 = 0.16%
            },

            ...
        ]
        """
        raise NotImplementedError()

    async def fetch_positions(self, symbol=None, params=None):
        """
        Fetch current position information

        For dual side mode, the value of position should always be positive, and positionSide indicates the direction
        For single side mode, the sign of the position indicates the current direction, positive for 'long' or negative for 'short

        :param symbol:  symbol in ccxt standard format, example: 'BTC/USDT'
        :param params:  dict for non-specific parameters
        :return:        a list of position structure

        example:
        [
            {
                'symbol':               'BTC/USDT',  // symbol
                'position':             0.5,         // position in Base amount, if contract_size is specified in exchange, position should be contract_amount * contract_size
                'openPrice':           9291.2,      // average open price
                'markPrice':           9289.9,      // current mark price if has
                'unrealizedProfit':    224.2532,    // unrealized profit with current market price or mark price
                'liquidatePrice':      8824.33,     // liquidation trigger price
                'leverage':             20,          // current leverage of the position
                'marginType':          'isolated',   // margin type of the position, 'isolated' or 'crossed'
                'initMargin':          232.28,      // initial margin
                'positionSide':        'long',      // side of the position, 'long' or 'short' for dual side mode, 'both' for single side mode
                'info':                 { ... }      // the original response
            },

            ...
        ]
        """
        raise NotImplementedError()

    async def change_leverage(self, symbol, leverage, positionSide=None, params=None):
        """
        Change leverage setting of the position

        :param symbol:          symbol in ccxt standard format, example: 'BTC/USDT'
        :param positionSide:   'long' or 'short' for dual side mode, 'both' for single side mode
        :param leverage:        leverage
        :param params:          dict for non-specific parameters
        :return:                info

        example:
        {
            'info':  { ... }  // the original response
        }
        """
        raise NotImplementedError()

    async def change_margin_type(self, symbol, marginType, positionSide=None, params=None):
        """
        Change margin type of the position

        :param symbol:          symbol in ccxt standard format, example: 'BTC/USDT'
        :param positionSide:   'long' or 'short' for dual side mode, 'both' for single side mode
        :param marginType:     'isolated' or 'crossed'
        :param params:          dict for non-specific parameters
        :return:                info

        example:
        {
            'info':  { ... }  // the original response
        }
        """
        raise NotImplementedError()

    async def fetch_position_side(self, symbol=None, params=None):
        """
        Fetch current position side of the symbol
        If the exchange doesn't support changing position side, just leave this to raise NotImplementedError()

        :param symbol:          symbol in ccxt standard format, example: 'BTC/USDT'
        :param params:          dict for non-specific parameters
        :return:                position side structure

        example: {
            'symbol':           'BTC/USDT',  // symbol
            'positionSide':    'dual',      // 'dual' or 'single'
            'info':             { ... },     // the original response
        }
        """
        raise NotImplementedError()

    async def change_position_side(self, symbol, positionSide, params=None):
        """
        Change current position side setting of the symbol
        If the exchange doesn't support changing position side, just leave this to raise NotImplementedError()

        :param symbol:          symbol in ccxt standard format, example: 'BTC/USDT'
        :param positionSide:   'dual' or 'single'
        :param params:          dict for non-specific parameters
        :return:                info

        example:
        {
            'info':  { ... }  // the original response
        }
        """
        raise NotImplementedError()

    async def fetch_funding_records(self, symbol=None, since=None, limit=None, fromId=None, direct='next', params=None):
        """
        Fetch funding fee records

        :param symbol:  symbol in ccxt standard format, example: 'BTC/USDT'
        :param since:   start time of the records, should be a Unix timestamp in milliseconds
        :param limit:   limit number of trades in response
        :param fromId: start id of the orders
        :param direct:  "prev" or "next"
        :param params:  dict for non-specific parameters
        :return:        a list of funding fee record structure

        example:
        [
            {
                'id':               '12345-67890:09876/54321',  // string trade id
                'fundingFee':      0.0211432,                  // funding fee
                'position':         0.5,                        // position when funding fee was produced
                'positionValue':   4588.22315,                 // value of the position when funding fee was produced, (position * price)
                'fundingRate':     0.0001,                     // funding fee rate
                'timestamp':        1502962946216,              // Unix timestamp in milliseconds
                'info':             { ... }                     // the original response
            }
        ]
        """
        raise NotImplementedError()

    async def change_isolated_margin(self, symbol, positionSide, direction, amount, params=None):
        """
        Change isolated margin

        :param symbol:          symbol in ccxt standard format, example: 'BTC/USDT'
        :param positionSide:   position side for indicate position, 'long' or 'short' for dual side mode, 'both' for single side mode
        :param direction:       'asc' or 'desc'
        :param amount:          amount
        :param params:          dict for non-specific parameters
        :return:                info

        example:
        {
            'info':  { ... }  // the original response
        }
        """

        raise NotImplementedError()

    async def fetch_incomes(self, symbol=None, since=None, limit=None, fromId=None, direct='next', params=None):
        """
        Fetch incomes of the account. Like https://binance-docs.github.io/apidocs/futures/en/#get-income-history-user_data

        :param symbol:  symbol in ccxt standard format, example: 'BTC/USDT'
        :param since:   start time of the orders, should be a Unix timestamp in milliseconds
        :param limit:   limit number of orders in response
        :param fromId: start id of the orders
        :param direct:  "prev" or "next"
        :param params:  dict for non-specific parameters
        :return:        income struct

        example:
        [
            {
                "symbol": "",               // trade symbol, if existing
                "incomeType": "TRANSFER",   // income type
                "income": "-0.37500000",    // income amount
                "asset": "USDT",            // income asset
                'time': 1502962946216, // Unix timestamp in milliseconds
                "tranId":"9689322392",      // transaction id
                "tradeId":""                // trade id, if existing
                "info":  { ... }            // the original response
            }
        ]
        """

        raise NotImplementedError()
